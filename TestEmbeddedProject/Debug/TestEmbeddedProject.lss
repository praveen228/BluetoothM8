
TestEmbeddedProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000132  000001c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000132  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000082  00800100  00800100  000001c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001c6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000017b  00000000  00000000  0000022e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000c2  00000000  00000000  000003a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000106  00000000  00000000  0000046b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00000574  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000196  00000000  00000000  000005e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000cf  00000000  00000000  0000077e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000084d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 75 00 	jmp	0xea	; 0xea <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 38       	cpi	r26, 0x82	; 130
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 5d 00 	call	0xba	; 0xba <main>
  88:	0c 94 97 00 	jmp	0x12e	; 0x12e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <getChar>:
	}
	return ret;
}
char getChar(void){
	char ret = '\0';
	if (rxReadPos != rxWritePos){
  90:	90 91 01 01 	lds	r25, 0x0101
  94:	80 91 00 01 	lds	r24, 0x0100
  98:	98 17       	cp	r25, r24
  9a:	69 f0       	breq	.+26     	; 0xb6 <getChar+0x26>
		ret = rxBuffer[rxReadPos];
  9c:	e9 2f       	mov	r30, r25
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	ee 5f       	subi	r30, 0xFE	; 254
  a2:	fe 4f       	sbci	r31, 0xFE	; 254
  a4:	80 81       	ld	r24, Z
		rxReadPos++;
  a6:	9f 5f       	subi	r25, 0xFF	; 255
		if (rxReadPos >= RX_BUFFER_SIZE)
  a8:	1a f0       	brmi	.+6      	; 0xb0 <getChar+0x20>
}
char getChar(void){
	char ret = '\0';
	if (rxReadPos != rxWritePos){
		ret = rxBuffer[rxReadPos];
		rxReadPos++;
  aa:	90 93 01 01 	sts	0x0101, r25
  ae:	08 95       	ret
		if (rxReadPos >= RX_BUFFER_SIZE)
		{
			rxReadPos = 0;
  b0:	10 92 01 01 	sts	0x0101, r1
  b4:	08 95       	ret
		ret = rxBuffer[rxReadPos];
	}
	return ret;
}
char getChar(void){
	char ret = '\0';
  b6:	80 e0       	ldi	r24, 0x00	; 0
		{
			rxReadPos = 0;
		}
	}
	return ret;
}
  b8:	08 95       	ret

000000ba <main>:

char getChar(void);
char peekChar(void);

int main (void){
	UBRR0H = (BRC>>8);
  ba:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = BRC;
  be:	87 e6       	ldi	r24, 0x67	; 103
  c0:	80 93 c4 00 	sts	0x00C4, r24
	
	UCSR0B = (1 << RXEN0) | (1 << RXCIE0);
  c4:	80 e9       	ldi	r24, 0x90	; 144
  c6:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1 << UCSZ01)| (1 << UCSZ00);
  ca:	86 e0       	ldi	r24, 0x06	; 6
  cc:	80 93 c2 00 	sts	0x00C2, r24
	
	DDRB = (1<<PORTB5);
  d0:	80 e2       	ldi	r24, 0x20	; 32
  d2:	84 b9       	out	0x04, r24	; 4
	
	sei();
  d4:	78 94       	sei
	
	while (1)	{
		char c = getChar();
  d6:	0e 94 48 00 	call	0x90	; 0x90 <getChar>
		if(c == '1'){
  da:	81 33       	cpi	r24, 0x31	; 49
  dc:	11 f4       	brne	.+4      	; 0xe2 <main+0x28>
			sbi(PORTB, PORTB5);
  de:	2d 9a       	sbi	0x05, 5	; 5
  e0:	fa cf       	rjmp	.-12     	; 0xd6 <main+0x1c>
		}
		else if (c == '0')
  e2:	80 33       	cpi	r24, 0x30	; 48
  e4:	c1 f7       	brne	.-16     	; 0xd6 <main+0x1c>
		{
			cbi(PORTB,PORTB5);
  e6:	2d 98       	cbi	0x05, 5	; 5
  e8:	f6 cf       	rjmp	.-20     	; 0xd6 <main+0x1c>

000000ea <__vector_18>:
			rxReadPos = 0;
		}
	}
	return ret;
}
ISR(USART_RX_vect){
  ea:	1f 92       	push	r1
  ec:	0f 92       	push	r0
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	0f 92       	push	r0
  f2:	11 24       	eor	r1, r1
  f4:	8f 93       	push	r24
  f6:	9f 93       	push	r25
  f8:	ef 93       	push	r30
  fa:	ff 93       	push	r31
	rxBuffer[rxWritePos] = UDR0;
  fc:	80 91 00 01 	lds	r24, 0x0100
 100:	90 91 c6 00 	lds	r25, 0x00C6
 104:	e8 2f       	mov	r30, r24
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	ee 5f       	subi	r30, 0xFE	; 254
 10a:	fe 4f       	sbci	r31, 0xFE	; 254
 10c:	90 83       	st	Z, r25
	rxWritePos++;
 10e:	8f 5f       	subi	r24, 0xFF	; 255
	if (rxWritePos >= RX_BUFFER_SIZE)
 110:	1a f0       	brmi	.+6      	; 0x118 <__vector_18+0x2e>
	}
	return ret;
}
ISR(USART_RX_vect){
	rxBuffer[rxWritePos] = UDR0;
	rxWritePos++;
 112:	80 93 00 01 	sts	0x0100, r24
 116:	02 c0       	rjmp	.+4      	; 0x11c <__vector_18+0x32>
	if (rxWritePos >= RX_BUFFER_SIZE)
	{
		rxWritePos = 0;
 118:	10 92 00 01 	sts	0x0100, r1
	}
 11c:	ff 91       	pop	r31
 11e:	ef 91       	pop	r30
 120:	9f 91       	pop	r25
 122:	8f 91       	pop	r24
 124:	0f 90       	pop	r0
 126:	0f be       	out	0x3f, r0	; 63
 128:	0f 90       	pop	r0
 12a:	1f 90       	pop	r1
 12c:	18 95       	reti

0000012e <_exit>:
 12e:	f8 94       	cli

00000130 <__stop_program>:
 130:	ff cf       	rjmp	.-2      	; 0x130 <__stop_program>
