
TestEmbeddedProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000001d6  0000026a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000086  00800100  00800100  0000026a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000026a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000029a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001df  00000000  00000000  000002d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000d2  00000000  00000000  000004b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000126  00000000  00000000  00000583  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  000006ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001cb  00000000  00000000  00000724  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ef  00000000  00000000  000008ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000009de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 c2 00 	jmp	0x184	; 0x184 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 38       	cpi	r26, 0x86	; 134
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 67 00 	call	0xce	; 0xce <main>
  88:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <getChar>:
	}
	return ret;
}
char getChar(void){
	char ret = '\0';
	if (rxReadPos != rxWritePos){
  90:	90 91 01 01 	lds	r25, 0x0101
  94:	80 91 00 01 	lds	r24, 0x0100
  98:	98 17       	cp	r25, r24
  9a:	b9 f0       	breq	.+46     	; 0xca <getChar+0x3a>
		ret = rxBuffer[rxReadPos];
  9c:	e9 2f       	mov	r30, r25
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	ea 5f       	subi	r30, 0xFA	; 250
  a2:	fe 4f       	sbci	r31, 0xFE	; 254
  a4:	80 81       	ld	r24, Z
		rxReadPos++;
  a6:	9f 5f       	subi	r25, 0xFF	; 255
  a8:	90 93 01 01 	sts	0x0101, r25
		state_change++;
  ac:	20 91 02 01 	lds	r18, 0x0102
  b0:	30 91 03 01 	lds	r19, 0x0103
  b4:	2f 5f       	subi	r18, 0xFF	; 255
  b6:	3f 4f       	sbci	r19, 0xFF	; 255
  b8:	30 93 03 01 	sts	0x0103, r19
  bc:	20 93 02 01 	sts	0x0102, r18
		if (rxReadPos >= RX_BUFFER_SIZE)
  c0:	99 23       	and	r25, r25
  c2:	24 f4       	brge	.+8      	; 0xcc <getChar+0x3c>
		{
			rxReadPos = 0;
  c4:	10 92 01 01 	sts	0x0101, r1
  c8:	08 95       	ret
		ret = rxBuffer[rxReadPos];
	}
	return ret;
}
char getChar(void){
	char ret = '\0';
  ca:	80 e0       	ldi	r24, 0x00	; 0
		{
			rxReadPos = 0;
		}
	}
	return ret;
}
  cc:	08 95       	ret

000000ce <main>:
char getChar(void);
char peekChar(void);

int main (void){
	
	UBRR0H = (BRC>>8);
  ce:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = BRC;
  d2:	89 e1       	ldi	r24, 0x19	; 25
  d4:	80 93 c4 00 	sts	0x00C4, r24
	
	UCSR0B |= (1 << RXEN0 ) | (1 << RXCIE0) | (1<<TXEN0);
  d8:	e1 ec       	ldi	r30, 0xC1	; 193
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	88 69       	ori	r24, 0x98	; 152
  e0:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ01) ;
  e2:	e2 ec       	ldi	r30, 0xC2	; 194
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	84 60       	ori	r24, 0x04	; 4
  ea:	80 83       	st	Z, r24
	
	DDRB = (1<<PORTB5);
  ec:	80 e2       	ldi	r24, 0x20	; 32
  ee:	84 b9       	out	0x04, r24	; 4
	
	sei();
  f0:	78 94       	sei
	p_state = INIT;
  f2:	10 92 04 01 	sts	0x0104, r1
	n_state =INIT;
  f6:	10 92 05 01 	sts	0x0105, r1
					}else{
				n_state=INIT;}
				break;
				case START:
				if (c=='2')	{
					n_state = INTER;
  fa:	68 94       	set
  fc:	ee 24       	eor	r14, r14
  fe:	e1 f8       	bld	r14, 1
			switch (p_state)
			{	
				case INIT:
				cbi(PORTB,PORTB5);
				if (c=='1'){
					n_state = START;
 100:	ff 24       	eor	r15, r15
 102:	f3 94       	inc	r15
				}
				else {n_state = INIT;}
				break;
				case INTER:
				if (c=='3')	{
					n_state = END;
 104:	03 e0       	ldi	r16, 0x03	; 3
				else {n_state = INIT;}
				break;
				case END:
				if (c=='4'){
					n_state = INIT;
					UDR0 = 'Y';
 106:	c6 ec       	ldi	r28, 0xC6	; 198
 108:	d0 e0       	ldi	r29, 0x00	; 0
 10a:	19 e5       	ldi	r17, 0x59	; 89
	sei();
	p_state = INIT;
	n_state =INIT;
	
	while (1)	{
		char c = getChar();
 10c:	0e 94 48 00 	call	0x90	; 0x90 <getChar>
		if (state_change!=0){
 110:	20 91 02 01 	lds	r18, 0x0102
 114:	30 91 03 01 	lds	r19, 0x0103
 118:	23 2b       	or	r18, r19
 11a:	c1 f3       	breq	.-16     	; 0x10c <main+0x3e>
			switch (p_state)
 11c:	90 91 04 01 	lds	r25, 0x0104
 120:	91 30       	cpi	r25, 0x01	; 1
 122:	79 f0       	breq	.+30     	; 0x142 <main+0x74>
 124:	28 f0       	brcs	.+10     	; 0x130 <main+0x62>
 126:	92 30       	cpi	r25, 0x02	; 2
 128:	a1 f0       	breq	.+40     	; 0x152 <main+0x84>
 12a:	93 30       	cpi	r25, 0x03	; 3
 12c:	d1 f0       	breq	.+52     	; 0x162 <main+0x94>
 12e:	21 c0       	rjmp	.+66     	; 0x172 <main+0xa4>
			{	
				case INIT:
				cbi(PORTB,PORTB5);
 130:	2d 98       	cbi	0x05, 5	; 5
				if (c=='1'){
 132:	81 33       	cpi	r24, 0x31	; 49
 134:	19 f4       	brne	.+6      	; 0x13c <main+0x6e>
					n_state = START;
 136:	f0 92 05 01 	sts	0x0105, r15
 13a:	1b c0       	rjmp	.+54     	; 0x172 <main+0xa4>
					}else{
				n_state=INIT;}
 13c:	10 92 05 01 	sts	0x0105, r1
 140:	18 c0       	rjmp	.+48     	; 0x172 <main+0xa4>
				break;
				case START:
				if (c=='2')	{
 142:	82 33       	cpi	r24, 0x32	; 50
 144:	19 f4       	brne	.+6      	; 0x14c <main+0x7e>
					n_state = INTER;
 146:	e0 92 05 01 	sts	0x0105, r14
 14a:	13 c0       	rjmp	.+38     	; 0x172 <main+0xa4>
				}
				else {n_state = INIT;}
 14c:	10 92 05 01 	sts	0x0105, r1
 150:	10 c0       	rjmp	.+32     	; 0x172 <main+0xa4>
				break;
				case INTER:
				if (c=='3')	{
 152:	83 33       	cpi	r24, 0x33	; 51
 154:	19 f4       	brne	.+6      	; 0x15c <main+0x8e>
					n_state = END;
 156:	00 93 05 01 	sts	0x0105, r16
 15a:	0b c0       	rjmp	.+22     	; 0x172 <main+0xa4>
				}
				else {n_state = INIT;}
 15c:	10 92 05 01 	sts	0x0105, r1
 160:	08 c0       	rjmp	.+16     	; 0x172 <main+0xa4>
				break;
				case END:
				if (c=='4'){
 162:	84 33       	cpi	r24, 0x34	; 52
 164:	21 f4       	brne	.+8      	; 0x16e <main+0xa0>
					n_state = INIT;
 166:	10 92 05 01 	sts	0x0105, r1
					UDR0 = 'Y';
 16a:	18 83       	st	Y, r17
 16c:	02 c0       	rjmp	.+4      	; 0x172 <main+0xa4>
					}else{
				n_state =INIT;}
 16e:	10 92 05 01 	sts	0x0105, r1
				break;
			}
			p_state = n_state;
 172:	80 91 05 01 	lds	r24, 0x0105
 176:	80 93 04 01 	sts	0x0104, r24
			state_change = 0;
 17a:	10 92 03 01 	sts	0x0103, r1
 17e:	10 92 02 01 	sts	0x0102, r1
 182:	c4 cf       	rjmp	.-120    	; 0x10c <main+0x3e>

00000184 <__vector_18>:
			rxReadPos = 0;
		}
	}
	return ret;
}
ISR(USART_RX_vect){
 184:	1f 92       	push	r1
 186:	0f 92       	push	r0
 188:	0f b6       	in	r0, 0x3f	; 63
 18a:	0f 92       	push	r0
 18c:	11 24       	eor	r1, r1
 18e:	8f 93       	push	r24
 190:	af 93       	push	r26
 192:	bf 93       	push	r27
 194:	ef 93       	push	r30
 196:	ff 93       	push	r31
	//Reads data when data written to 
	rxBuffer[rxWritePos] = UDR0;
 198:	e6 ec       	ldi	r30, 0xC6	; 198
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	80 81       	ld	r24, Z
 19e:	a0 91 00 01 	lds	r26, 0x0100
 1a2:	b0 e0       	ldi	r27, 0x00	; 0
 1a4:	aa 5f       	subi	r26, 0xFA	; 250
 1a6:	be 4f       	sbci	r27, 0xFE	; 254
 1a8:	8c 93       	st	X, r24
	//Echo's lines to terminal
	UDR0 = rxBuffer[rxWritePos];
 1aa:	80 83       	st	Z, r24
	rxWritePos++;
 1ac:	80 91 00 01 	lds	r24, 0x0100
 1b0:	8f 5f       	subi	r24, 0xFF	; 255
	if (rxWritePos >= RX_BUFFER_SIZE)
 1b2:	1a f0       	brmi	.+6      	; 0x1ba <__vector_18+0x36>
ISR(USART_RX_vect){
	//Reads data when data written to 
	rxBuffer[rxWritePos] = UDR0;
	//Echo's lines to terminal
	UDR0 = rxBuffer[rxWritePos];
	rxWritePos++;
 1b4:	80 93 00 01 	sts	0x0100, r24
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <__vector_18+0x3a>
	if (rxWritePos >= RX_BUFFER_SIZE)
	{
		rxWritePos = 0;
 1ba:	10 92 00 01 	sts	0x0100, r1
	}

}
 1be:	ff 91       	pop	r31
 1c0:	ef 91       	pop	r30
 1c2:	bf 91       	pop	r27
 1c4:	af 91       	pop	r26
 1c6:	8f 91       	pop	r24
 1c8:	0f 90       	pop	r0
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	0f 90       	pop	r0
 1ce:	1f 90       	pop	r1
 1d0:	18 95       	reti

000001d2 <_exit>:
 1d2:	f8 94       	cli

000001d4 <__stop_program>:
 1d4:	ff cf       	rjmp	.-2      	; 0x1d4 <__stop_program>
